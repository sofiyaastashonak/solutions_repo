{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Introduction Have you ever wondered how a soccer ball follows a curved path when kicked? Or how rockets and missiles follow precise trajectories? This is all because of projectile motion ! In this report, i will explore how the range of a projectile depends on the launch angle and break it down step by step. 2. What is Projectile Motion? Projectile motion happens when an object is launched into the air and moves under the influence of gravity . The motion can be split into two parts: Horizontal motion : The object moves forward with a constant speed. Vertical motion : The object moves up and down due to gravity. To understand projectile motion better, let's derive some important equations. 3. Key Equations of Motion 3.1 Breaking Motion into Components If an object is launched with an initial speed \\(v_0\\) at an angle \\(\\theta\\) , we can break this velocity into: Horizontal velocity : \\(v_x=v_0\\cos\\theta\\) Vertical velocity : \\(v_y=v_0\\sin\\theta\\) Since gravity only affects vertical motion , the horizontal velocity stays constant . 3.2 Equations for Position and Velocity Using basic physics formulas, we get: 1\ufe0f\u20e3 Horizontal position (distance traveled in time \\(t\\) ) : \\[x=v_0\\cos\\theta\\cdot t\\] 2\ufe0f\u20e3 Vertical position (height at time \\(t\\) ) : \\[y=v_0\\sin\\theta\\cdot t-\\frac{1}{2}gt^2\\] 3\ufe0f\u20e3 Velocity in the horizontal direction (always constant): \\[v_x=v_0\\cos\\theta\\] 4\ufe0f\u20e3 Velocity in the vertical direction (changes due to gravity): \\[v_y=v_0\\sin\\theta-gt\\] 3.3 Finding Special Points Now let's look at some important moments in the projectile\u2019s motion. \u2714\ufe0f Time of Flight (How long the object stays in the air): \\[t_f=\\frac{2v_0\\sin\\theta}{g}\\] \u2714\ufe0f Maximum Height (The highest point the object reaches): \\[H=\\frac{(v_0\\sin\\theta)^2}{2g}\\] \u2714\ufe0f Range (Total Distance the Object Travels Before Hitting the Ground) : \\[R=\\frac{v_0^2\\sin(2\\theta)}{g}\\] Interesting Fact: The projectile travels the longest distance when launched at 45\u00b0 because \\(\\sin(2\\theta)\\) is largest at this angle. Why Does a Projectile Travel the Farthest at 45\u00b0? \ud83d\udd39 The Optimal Angle: 45\u00b0 At 45\u00b0 , the velocity is split equally between horizontal and vertical directions, creating the perfect balance between airtime and forward motion . Mathematically, the range of a projectile is given by: \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] where: \\(R\\) = range of the projectile, \\(v_0\\) = initial velocity, \\(\\theta\\) = launch angle, \\(g\\) = acceleration due to gravity. The function \\(\\sin 2\\theta\\) reaches its maximum value when: \\[ 2\\theta = 90^\\circ \\quad \\Rightarrow \\quad \\theta = 45^\\circ \\] Thus, a projectile launched at 45\u00b0 travels the farthest distance because it achieves the optimal balance between horizontal and vertical motion. 4. Family of Solutions The equations above describe a family of solutions depending on different values of: Launch speed ( \\(v_0\\) ) : Faster projectiles travel farther and higher. Launch angle ( \\(\\theta\\) ) : Determines the shape of the trajectory. Gravity ( \\(g\\) ) : Affects how quickly the projectile falls. Initial height ( \\(h\\) ) : Changes the total flight time and range. By adjusting these values, we get different possible trajectories , from low and fast motions (like bullets) to high and slow ones (like thrown balls). 5. Limitations of the Idealized Model The equations we used assume an ideal world where: \u274c No air resistance : In reality, air slows down projectiles. \u274c Flat ground assumption : The model assumes the projectile lands at the same height. \u274c Constant gravity ( \\(g\\) ) : Gravity actually changes with altitude. Because of these assumptions, our equations give approximate results in the real world. 6. Extending the Model: Real-World Effects To make the model more realistic , we can add: \u2705 Air Resistance (Drag Force) The force slows the projectile down. The drag force is proportional to the square of the velocity: \\[F_d=\\frac{1}{2} C_d \\rho A v^2\\] where \\(C_d\\) is the drag coefficient, \\(\\rho\\) is air density, and \\(A\\) is the cross-sectional area. \u2705 Wind Effects A tailwind increases range, while a headwind decreases it. \u2705 Launch Altitude At high altitudes, air resistance is lower, and gravity is weaker, so objects travel farther . \u2705 Rotation of the Earth (Coriolis Effect) Important for long-range artillery and missiles. 7. Real-World Applications \ud83c\udf0d Projectile motion is not just for physics classes! It applies to: Sports : How football players kick the ball at different angles. Military : How missiles and bullets are fired for maximum range. Space Exploration : How rockets are launched at precise angles. Phython Implimentation def plot_trajectory_comparison_separate(): \"\"\"Plot trajectories for different angles and velocities on separate plots\"\"\" projectile = ProjectileMotion() # Parameters to compare velocities = [20, 25] # m/s angles = [30, 45, 60] # degrees colors = ['blue', 'red', 'green'] for v0 in velocities: plt.figure(figsize=(12, 8)) # Create a new figure for each velocity # Plot trajectories for the current velocity for angle, color in zip(angles, colors): x, y = projectile.calculate_trajectory(v0, angle) plt.plot(x, y, label=f'\u03b8={angle}\u00b0', color=color) plt.title(f'Projectile Motion Trajectories (v0 = {v0} m/s)') plt.xlabel('Distance (m)') plt.ylabel('Height (m)') plt.grid(True) plt.legend() plt.axis('equal') plt.show() # Show the plot for the current velocity before moving to the next # Call the modified function to generate the plots plot_trajectory_comparison_separate() Plot 8. Conclusion Now we u understand the key ideas behind projectile motion: It has both horizontal and vertical movement . Gravity only affects the vertical motion . The best angle for the longest range is 45\u00b0 . The initial speed, angle, and gravity all affect the motion . The real world includes air resistance, wind, and altitude effects . Understanding these principles helps in designing better sports strategies, video game physics, and even launching space missions!","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-introduction","text":"Have you ever wondered how a soccer ball follows a curved path when kicked? Or how rockets and missiles follow precise trajectories? This is all because of projectile motion ! In this report, i will explore how the range of a projectile depends on the launch angle and break it down step by step.","title":"1. Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-what-is-projectile-motion","text":"Projectile motion happens when an object is launched into the air and moves under the influence of gravity . The motion can be split into two parts: Horizontal motion : The object moves forward with a constant speed. Vertical motion : The object moves up and down due to gravity. To understand projectile motion better, let's derive some important equations.","title":"2. What is Projectile Motion?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-key-equations-of-motion","text":"","title":"3. Key Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-breaking-motion-into-components","text":"If an object is launched with an initial speed \\(v_0\\) at an angle \\(\\theta\\) , we can break this velocity into: Horizontal velocity : \\(v_x=v_0\\cos\\theta\\) Vertical velocity : \\(v_y=v_0\\sin\\theta\\) Since gravity only affects vertical motion , the horizontal velocity stays constant .","title":"3.1 Breaking Motion into Components"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#32-equations-for-position-and-velocity","text":"Using basic physics formulas, we get: 1\ufe0f\u20e3 Horizontal position (distance traveled in time \\(t\\) ) : \\[x=v_0\\cos\\theta\\cdot t\\] 2\ufe0f\u20e3 Vertical position (height at time \\(t\\) ) : \\[y=v_0\\sin\\theta\\cdot t-\\frac{1}{2}gt^2\\] 3\ufe0f\u20e3 Velocity in the horizontal direction (always constant): \\[v_x=v_0\\cos\\theta\\] 4\ufe0f\u20e3 Velocity in the vertical direction (changes due to gravity): \\[v_y=v_0\\sin\\theta-gt\\]","title":"3.2 Equations for Position and Velocity"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#33-finding-special-points","text":"Now let's look at some important moments in the projectile\u2019s motion. \u2714\ufe0f Time of Flight (How long the object stays in the air): \\[t_f=\\frac{2v_0\\sin\\theta}{g}\\] \u2714\ufe0f Maximum Height (The highest point the object reaches): \\[H=\\frac{(v_0\\sin\\theta)^2}{2g}\\] \u2714\ufe0f Range (Total Distance the Object Travels Before Hitting the Ground) : \\[R=\\frac{v_0^2\\sin(2\\theta)}{g}\\]","title":"3.3 Finding Special Points"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#interesting-fact-the-projectile-travels-the-longest-distance-when-launched-at-45-because-sin2theta-is-largest-at-this-angle","text":"","title":"Interesting Fact: The projectile travels the longest distance when launched at 45\u00b0 because \\(\\sin(2\\theta)\\) is largest at this angle."},{"location":"1%20Physics/1%20Mechanics/Problem_1/#why-does-a-projectile-travel-the-farthest-at-45","text":"","title":"Why Does a Projectile Travel the Farthest at 45\u00b0?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#the-optimal-angle-45","text":"At 45\u00b0 , the velocity is split equally between horizontal and vertical directions, creating the perfect balance between airtime and forward motion . Mathematically, the range of a projectile is given by: \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] where: \\(R\\) = range of the projectile, \\(v_0\\) = initial velocity, \\(\\theta\\) = launch angle, \\(g\\) = acceleration due to gravity. The function \\(\\sin 2\\theta\\) reaches its maximum value when: \\[ 2\\theta = 90^\\circ \\quad \\Rightarrow \\quad \\theta = 45^\\circ \\] Thus, a projectile launched at 45\u00b0 travels the farthest distance because it achieves the optimal balance between horizontal and vertical motion.","title":"\ud83d\udd39 The Optimal Angle: 45\u00b0"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-family-of-solutions","text":"The equations above describe a family of solutions depending on different values of: Launch speed ( \\(v_0\\) ) : Faster projectiles travel farther and higher. Launch angle ( \\(\\theta\\) ) : Determines the shape of the trajectory. Gravity ( \\(g\\) ) : Affects how quickly the projectile falls. Initial height ( \\(h\\) ) : Changes the total flight time and range. By adjusting these values, we get different possible trajectories , from low and fast motions (like bullets) to high and slow ones (like thrown balls).","title":"4. Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-limitations-of-the-idealized-model","text":"The equations we used assume an ideal world where: \u274c No air resistance : In reality, air slows down projectiles. \u274c Flat ground assumption : The model assumes the projectile lands at the same height. \u274c Constant gravity ( \\(g\\) ) : Gravity actually changes with altitude. Because of these assumptions, our equations give approximate results in the real world.","title":"5. Limitations of the Idealized Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#6-extending-the-model-real-world-effects","text":"To make the model more realistic , we can add: \u2705 Air Resistance (Drag Force) The force slows the projectile down. The drag force is proportional to the square of the velocity: \\[F_d=\\frac{1}{2} C_d \\rho A v^2\\] where \\(C_d\\) is the drag coefficient, \\(\\rho\\) is air density, and \\(A\\) is the cross-sectional area. \u2705 Wind Effects A tailwind increases range, while a headwind decreases it. \u2705 Launch Altitude At high altitudes, air resistance is lower, and gravity is weaker, so objects travel farther . \u2705 Rotation of the Earth (Coriolis Effect) Important for long-range artillery and missiles.","title":"6. Extending the Model: Real-World Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#7-real-world-applications","text":"Projectile motion is not just for physics classes! It applies to: Sports : How football players kick the ball at different angles. Military : How missiles and bullets are fired for maximum range. Space Exploration : How rockets are launched at precise angles.","title":"7. Real-World Applications \ud83c\udf0d"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#phython-implimentation","text":"def plot_trajectory_comparison_separate(): \"\"\"Plot trajectories for different angles and velocities on separate plots\"\"\" projectile = ProjectileMotion() # Parameters to compare velocities = [20, 25] # m/s angles = [30, 45, 60] # degrees colors = ['blue', 'red', 'green'] for v0 in velocities: plt.figure(figsize=(12, 8)) # Create a new figure for each velocity # Plot trajectories for the current velocity for angle, color in zip(angles, colors): x, y = projectile.calculate_trajectory(v0, angle) plt.plot(x, y, label=f'\u03b8={angle}\u00b0', color=color) plt.title(f'Projectile Motion Trajectories (v0 = {v0} m/s)') plt.xlabel('Distance (m)') plt.ylabel('Height (m)') plt.grid(True) plt.legend() plt.axis('equal') plt.show() # Show the plot for the current velocity before moving to the next # Call the modified function to generate the plots plot_trajectory_comparison_separate()","title":"Phython Implimentation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot","text":"","title":"Plot"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#8-conclusion","text":"Now we u understand the key ideas behind projectile motion: It has both horizontal and vertical movement . Gravity only affects the vertical motion . The best angle for the longest range is 45\u00b0 . The initial speed, angle, and gravity all affect the motion . The real world includes air resistance, wind, and altitude effects . Understanding these principles helps in designing better sports strategies, video game physics, and even launching space missions!","title":"8. Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation The forced damped pendulum is a system that exhibits a wide range of behaviors, from simple periodic oscillations to chaotic motion . The equation governing its motion is: \\[\\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2\\sin\\theta = A\\cos(\\omega t)\\] where: - \\(\\theta\\) = angular displacement (radians) - \\(\\gamma\\) = damping coefficient (determines energy loss over time) - \\(\\omega_0\\) = natural frequency of the pendulum, given by: \\( \\(\\omega_0^2 = \\frac{g}{L}\\) \\) where \\(g\\) is the acceleration due to gravity and \\(L\\) is the pendulum length - \\(A\\) = amplitude of the external driving force - \\(\\omega\\) = driving frequency of the external force 1.1 Small-Angle Approximation For small oscillations , we approximate: \\[\\sin\\theta \\approx \\theta\\] Substituting this approximation into the equation of motion simplifies it to: \\[\\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2\\theta = A\\cos(\\omega t)\\] This is now a linear differential equation , which can be solved analytically. The general solution consists of two parts: Homogeneous solution (natural motion of the damped pendulum): \\( \\(\\theta_h(t) = e^{-\\gamma t/2} (C_1\\cos(\\omega_d t) + C_2\\sin(\\omega_d t))\\) \\) where the damped frequency is: \\( \\(\\omega_d = \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{4}}\\) \\) Particular solution (response to the external force): \\( \\(\\theta_p(t) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2\\omega^2}} \\cos(\\omega t - \\phi)\\) \\) where the phase shift \\(\\phi\\) is given by: \\( \\(\\tan\\phi = \\frac{\\gamma\\omega}{\\omega_0^2 - \\omega^2}\\) \\) The total solution is: \\( \\(\\theta(t) = \\theta_h(t) + \\theta_p(t)\\) \\) 1.2 Resonance Condition Resonance occurs when the driving frequency matches the system\u2019s natural frequency: \\[\\omega \\approx \\omega_0\\] At resonance, the amplitude of oscillations increases significantly , which can lead to extreme behaviors in real-world systems (e.g., structural failures in bridges or mechanical components). 1.3 Energy Exchange in the System The energy in the forced damped pendulum consists of: Kinetic energy : \\( \\(KE = \\frac{1}{2} m L^2 \\dot{\\theta}^2\\) \\) Potential energy : \\( \\(PE = mgL(1 - \\cos\\theta)\\) \\) Total energy : \\( \\(E = KE + PE\\) \\) Over time, damping ( \\(\\gamma\\) ) removes energy from the system, while the external force ( \\(A\\cos(\\omega t)\\) ) injects energy. The balance between these competing effects determines the system\u2019s long-term behavior. 2. Analysis of Dynamics \ud83d\udcca 2.1 Influence of System Parameters The behavior of the pendulum depends on: - Damping \\(\\gamma\\) : - High damping: Oscillations die out quickly. - Low damping: Sustained oscillations, possibly chaotic motion. - Driving force amplitude \\(A\\) : - Small \\(A\\) : Regular oscillations. - Large \\(A\\) : Large amplitude, possibly chaotic motion. - Driving frequency \\(\\omega\\) : - Near \\(\\omega_0\\) : Resonance can occur. - Far from \\(\\omega_0\\) : No significant amplification. 2.2 Types of Motion Observed Depending on the parameter values, the system exhibits: \u2705 Periodic motion (stable oscillations) \u2705 Resonance (sharp amplitude increase at specific frequencies) \u2705 Quasi-periodic motion (oscillations with two incommensurate frequencies) \u2705 Chaotic motion (unpredictable behavior due to sensitivity to initial conditions) 3. Practical Applications \ud83c\udf0d The forced damped pendulum model is useful in: \u2705 Energy harvesting (pendulum-based generators converting mechanical energy into electricity) \u2705 Suspension bridge analysis (to prevent resonance-induced collapses like Tacoma Narrows Bridge) \u2705 Electrical circuits (driven RLC circuits behave analogously) \u2705 Biomechanics (understanding human walking and balance) 4. Computational Implementation ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint Pendulum differential equation def pendulum_equation(state, t, b, f, omega): \"\"\" state = [theta, omega] (angle, angular velocity) b = damping coefficient f = forcing amplitude omega = forcing frequency \"\"\" theta, omega = state dtheta_dt = omega domega_dt = -np.sin(theta) - b omega + f np.cos(omega*t) return [dtheta_dt, domega_dt] RK4 integration method def rk4_step(state, t, dt, b, f, omega): k1 = np.array(pendulum_equation(state, t, b, f, omega)) k2 = np.array(pendulum_equation(state + 0.5 dt k1, t + 0.5 dt, b, f, omega)) k3 = np.array(pendulum_equation(state + 0.5 dt k2, t + 0.5 dt, b, f, omega)) k4 = np.array(pendulum_equation(state + dt k3, t + dt, b, f, omega)) return state + (dt/6.0) (k1 + 2 k2 + 2 k3 + k4) Simulation function def simulate_pendulum(t_max, dt, theta0, omega0, b, f, omega): t = np.arange(0, t_max, dt) states = np.zeros((len(t), 2)) states[0] = [theta0, omega0] for i in range(1, len(t)): states[i] = rk4_step(states[i-1], t[i-1], dt, b, f, omega) return t, states[:, 0], states[:, 1] Parameters t_max = 100.0 dt = 0.05 theta0 = 0.1 omega0 = 0.0 Different simulation cases cases = [ {\"b\": 0.1, \"f\": 0.0, \"omega\": 0.0, \"label\": \"Undamped\"}, {\"b\": 0.5, \"f\": 0.0, \"omega\": 0.0, \"label\": \"Damped\"}, {\"b\": 0.5, \"f\": 0.5, \"omega\": 1.0, \"label\": \"Forced\"} ] 1. Time series plot plt.figure(figsize=(12, 8)) for case in cases: t, theta, omega = simulate_pendulum(t_max, dt, theta0, omega0, case[\"b\"], case[\"f\"], case[\"omega\"]) plt.plot(t, theta, label=case[\"label\"]) plt.title(\"Pendulum Motion\") plt.xlabel(\"Time\") plt.ylabel(\"Angle (rad)\") plt.legend() plt.grid(True) 2. Phase portrait plt.figure(figsize=(12, 8)) for case in cases: t, theta, omega = simulate_pendulum(t_max, dt, theta0, omega0, case[\"b\"], case[\"f\"], case[\"omega\"]) plt.plot(theta, omega, label=case[\"label\"], alpha=0.5) plt.title(\"Phase Portrait\") plt.xlabel(\"Angle (rad)\") plt.ylabel(\"Angular Velocity (rad/s)\") plt.legend() plt.grid(True) 3. Poincar\u00e9 section plt.figure(figsize=(12, 8)) for case in cases: t, theta, omega = simulate_pendulum(t_max, dt, theta0, omega0, case[\"b\"], case[\"f\"], case[\"omega\"]) # Sample at forcing period period = 2*np.pi/case[\"omega\"] if case[\"omega\"] != 0 else t_max sample_indices = np.arange(0, len(t), int(period/dt)) plt.scatter(theta[sample_indices], omega[sample_indices], label=case[\"label\"], s=10) plt.title(\"Poincar\u00e9 Section\") plt.xlabel(\"Angle (rad)\") plt.ylabel(\"Angular Velocity (rad/s)\") plt.legend() plt.grid(True) 4. Bifurcation diagram plt.figure(figsize=(12, 8)) f_values = np.linspace(0, 1.5, 200) bifurcation_points = [] for f in f_values: t, theta, omega = simulate_pendulum(t_max, dt, theta0, omega0, 0.5, f, 1.0) # Take samples from second half of simulation to avoid transients period = 2*np.pi/1.0 sample_indices = np.arange(int(len(t)/2), len(t), int(period/dt)) bifurcation_points.extend(theta[sample_indices]) plt.scatter([f_values[i//len(sample_indices)] for i in range(len(bifurcation_points))], bifurcation_points, s=1) plt.title(\"Bifurcation Diagram\") plt.xlabel(\"Forcing Amplitude\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.tight_layout() plt.show() Print some basic analysis for case in cases: t, theta, omega = simulate_pendulum(t_max, dt, theta0, omega0, case[\"b\"], case[\"f\"], case[\"omega\"]) print(f\"\\n{case['label']} Case:\") print(f\"Max amplitude: {np.max(np.abs(theta)):.3f} rad\") print(f\"Final energy: {0.5 omega[-1] *2 + (1-np.cos(theta[-1])):.3f}\") ``` 5. Conclusion The forced damped pendulum is a powerful model for understanding real-world oscillatory systems. By adjusting damping, forcing, and initial conditions, we can explore periodic, resonant, and chaotic behaviors . Using numerical simulations and phase-space analysis , we can study transitions from simple oscillations to chaos , with applications in engineering, physics, and biomechanics . This report combines theoretical derivations, computational techniques, and real-world applications to provide a deep understanding of the system.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The forced damped pendulum is a system that exhibits a wide range of behaviors, from simple periodic oscillations to chaotic motion . The equation governing its motion is: \\[\\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2\\sin\\theta = A\\cos(\\omega t)\\] where: - \\(\\theta\\) = angular displacement (radians) - \\(\\gamma\\) = damping coefficient (determines energy loss over time) - \\(\\omega_0\\) = natural frequency of the pendulum, given by: \\( \\(\\omega_0^2 = \\frac{g}{L}\\) \\) where \\(g\\) is the acceleration due to gravity and \\(L\\) is the pendulum length - \\(A\\) = amplitude of the external driving force - \\(\\omega\\) = driving frequency of the external force","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-small-angle-approximation","text":"For small oscillations , we approximate: \\[\\sin\\theta \\approx \\theta\\] Substituting this approximation into the equation of motion simplifies it to: \\[\\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2\\theta = A\\cos(\\omega t)\\] This is now a linear differential equation , which can be solved analytically. The general solution consists of two parts: Homogeneous solution (natural motion of the damped pendulum): \\( \\(\\theta_h(t) = e^{-\\gamma t/2} (C_1\\cos(\\omega_d t) + C_2\\sin(\\omega_d t))\\) \\) where the damped frequency is: \\( \\(\\omega_d = \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{4}}\\) \\) Particular solution (response to the external force): \\( \\(\\theta_p(t) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2\\omega^2}} \\cos(\\omega t - \\phi)\\) \\) where the phase shift \\(\\phi\\) is given by: \\( \\(\\tan\\phi = \\frac{\\gamma\\omega}{\\omega_0^2 - \\omega^2}\\) \\) The total solution is: \\( \\(\\theta(t) = \\theta_h(t) + \\theta_p(t)\\) \\)","title":"1.1 Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#12-resonance-condition","text":"Resonance occurs when the driving frequency matches the system\u2019s natural frequency: \\[\\omega \\approx \\omega_0\\] At resonance, the amplitude of oscillations increases significantly , which can lead to extreme behaviors in real-world systems (e.g., structural failures in bridges or mechanical components).","title":"1.2 Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#13-energy-exchange-in-the-system","text":"The energy in the forced damped pendulum consists of: Kinetic energy : \\( \\(KE = \\frac{1}{2} m L^2 \\dot{\\theta}^2\\) \\) Potential energy : \\( \\(PE = mgL(1 - \\cos\\theta)\\) \\) Total energy : \\( \\(E = KE + PE\\) \\) Over time, damping ( \\(\\gamma\\) ) removes energy from the system, while the external force ( \\(A\\cos(\\omega t)\\) ) injects energy. The balance between these competing effects determines the system\u2019s long-term behavior.","title":"1.3 Energy Exchange in the System"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics \ud83d\udcca"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#21-influence-of-system-parameters","text":"The behavior of the pendulum depends on: - Damping \\(\\gamma\\) : - High damping: Oscillations die out quickly. - Low damping: Sustained oscillations, possibly chaotic motion. - Driving force amplitude \\(A\\) : - Small \\(A\\) : Regular oscillations. - Large \\(A\\) : Large amplitude, possibly chaotic motion. - Driving frequency \\(\\omega\\) : - Near \\(\\omega_0\\) : Resonance can occur. - Far from \\(\\omega_0\\) : No significant amplification.","title":"2.1 Influence of System Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#22-types-of-motion-observed","text":"Depending on the parameter values, the system exhibits: \u2705 Periodic motion (stable oscillations) \u2705 Resonance (sharp amplitude increase at specific frequencies) \u2705 Quasi-periodic motion (oscillations with two incommensurate frequencies) \u2705 Chaotic motion (unpredictable behavior due to sensitivity to initial conditions)","title":"2.2 Types of Motion Observed"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum model is useful in: \u2705 Energy harvesting (pendulum-based generators converting mechanical energy into electricity) \u2705 Suspension bridge analysis (to prevent resonance-induced collapses like Tacoma Narrows Bridge) \u2705 Electrical circuits (driven RLC circuits behave analogously) \u2705 Biomechanics (understanding human walking and balance)","title":"3. Practical Applications \ud83c\udf0d"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-computational-implementation","text":"```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint","title":"4. Computational Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#pendulum-differential-equation","text":"def pendulum_equation(state, t, b, f, omega): \"\"\" state = [theta, omega] (angle, angular velocity) b = damping coefficient f = forcing amplitude omega = forcing frequency \"\"\" theta, omega = state dtheta_dt = omega domega_dt = -np.sin(theta) - b omega + f np.cos(omega*t) return [dtheta_dt, domega_dt]","title":"Pendulum differential equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#rk4-integration-method","text":"def rk4_step(state, t, dt, b, f, omega): k1 = np.array(pendulum_equation(state, t, b, f, omega)) k2 = np.array(pendulum_equation(state + 0.5 dt k1, t + 0.5 dt, b, f, omega)) k3 = np.array(pendulum_equation(state + 0.5 dt k2, t + 0.5 dt, b, f, omega)) k4 = np.array(pendulum_equation(state + dt k3, t + dt, b, f, omega)) return state + (dt/6.0) (k1 + 2 k2 + 2 k3 + k4)","title":"RK4 integration method"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#simulation-function","text":"def simulate_pendulum(t_max, dt, theta0, omega0, b, f, omega): t = np.arange(0, t_max, dt) states = np.zeros((len(t), 2)) states[0] = [theta0, omega0] for i in range(1, len(t)): states[i] = rk4_step(states[i-1], t[i-1], dt, b, f, omega) return t, states[:, 0], states[:, 1]","title":"Simulation function"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"t_max = 100.0 dt = 0.05 theta0 = 0.1 omega0 = 0.0","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#different-simulation-cases","text":"cases = [ {\"b\": 0.1, \"f\": 0.0, \"omega\": 0.0, \"label\": \"Undamped\"}, {\"b\": 0.5, \"f\": 0.0, \"omega\": 0.0, \"label\": \"Damped\"}, {\"b\": 0.5, \"f\": 0.5, \"omega\": 1.0, \"label\": \"Forced\"} ]","title":"Different simulation cases"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-time-series-plot","text":"plt.figure(figsize=(12, 8)) for case in cases: t, theta, omega = simulate_pendulum(t_max, dt, theta0, omega0, case[\"b\"], case[\"f\"], case[\"omega\"]) plt.plot(t, theta, label=case[\"label\"]) plt.title(\"Pendulum Motion\") plt.xlabel(\"Time\") plt.ylabel(\"Angle (rad)\") plt.legend() plt.grid(True)","title":"1. Time series plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-phase-portrait","text":"plt.figure(figsize=(12, 8)) for case in cases: t, theta, omega = simulate_pendulum(t_max, dt, theta0, omega0, case[\"b\"], case[\"f\"], case[\"omega\"]) plt.plot(theta, omega, label=case[\"label\"], alpha=0.5) plt.title(\"Phase Portrait\") plt.xlabel(\"Angle (rad)\") plt.ylabel(\"Angular Velocity (rad/s)\") plt.legend() plt.grid(True)","title":"2. Phase portrait"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-poincare-section","text":"plt.figure(figsize=(12, 8)) for case in cases: t, theta, omega = simulate_pendulum(t_max, dt, theta0, omega0, case[\"b\"], case[\"f\"], case[\"omega\"]) # Sample at forcing period period = 2*np.pi/case[\"omega\"] if case[\"omega\"] != 0 else t_max sample_indices = np.arange(0, len(t), int(period/dt)) plt.scatter(theta[sample_indices], omega[sample_indices], label=case[\"label\"], s=10) plt.title(\"Poincar\u00e9 Section\") plt.xlabel(\"Angle (rad)\") plt.ylabel(\"Angular Velocity (rad/s)\") plt.legend() plt.grid(True)","title":"3. Poincar\u00e9 section"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-bifurcation-diagram","text":"plt.figure(figsize=(12, 8)) f_values = np.linspace(0, 1.5, 200) bifurcation_points = [] for f in f_values: t, theta, omega = simulate_pendulum(t_max, dt, theta0, omega0, 0.5, f, 1.0) # Take samples from second half of simulation to avoid transients period = 2*np.pi/1.0 sample_indices = np.arange(int(len(t)/2), len(t), int(period/dt)) bifurcation_points.extend(theta[sample_indices]) plt.scatter([f_values[i//len(sample_indices)] for i in range(len(bifurcation_points))], bifurcation_points, s=1) plt.title(\"Bifurcation Diagram\") plt.xlabel(\"Forcing Amplitude\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.tight_layout() plt.show()","title":"4. Bifurcation diagram"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#print-some-basic-analysis","text":"for case in cases: t, theta, omega = simulate_pendulum(t_max, dt, theta0, omega0, case[\"b\"], case[\"f\"], case[\"omega\"]) print(f\"\\n{case['label']} Case:\") print(f\"Max amplitude: {np.max(np.abs(theta)):.3f} rad\") print(f\"Final energy: {0.5 omega[-1] *2 + (1-np.cos(theta[-1])):.3f}\") ```","title":"Print some basic analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_1","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-conclusion","text":"The forced damped pendulum is a powerful model for understanding real-world oscillatory systems. By adjusting damping, forcing, and initial conditions, we can explore periodic, resonant, and chaotic behaviors . Using numerical simulations and phase-space analysis , we can study transitions from simple oscillations to chaos , with applications in engineering, physics, and biomechanics . This report combines theoretical derivations, computational techniques, and real-world applications to provide a deep understanding of the system.","title":"5. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}