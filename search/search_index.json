{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Background Theoretical Foundation of Projectile Motion 1. Introduction Projectile motion is a fundamental topic in classical mechanics that describes the motion of an object under the influence of gravity. This motion can be analyzed by breaking it into two independent components: horizontal motion (constant velocity) and vertical motion (uniformly accelerated motion). The governing equations of motion can be derived using Newton\u2019s laws. 2. Derivation of Governing Equations To analyze projectile motion, we consider an object launched with an initial velocity \\(v_0\\) at an angle of projection \\(\\theta\\) from the horizontal. The motion is influenced by gravitational acceleration \\(g\\) , assuming air resistance is negligible. 2.1 Equations of Motion Using kinematic equations, we resolve the motion into horizontal and vertical components: Horizontal displacement \\(x(t)\\) : \\( \\(x=v_0\\cos\\theta\\cdot t\\) \\) Vertical displacement \\(y(t)\\) : \\( \\(y=v_0\\sin\\theta\\cdot t-\\frac{1}{2}gt^2\\) \\) Horizontal velocity \\(v_x(t)\\) : \\( \\(v_x=v_0\\cos\\theta\\) \\) (Since there is no acceleration in the horizontal direction, the velocity remains constant.) Vertical velocity \\(v_y(t)\\) : \\( \\(v_y=v_0\\sin\\theta-gt\\) \\) Time of flight (when the projectile returns to the initial height \\(y=0\\) ): \\( \\(t_f=\\frac{2v_0\\sin\\theta}{g}\\) \\) Maximum height (when vertical velocity becomes zero, \\(v_y=0\\) ): \\( \\(H=\\frac{(v_0\\sin\\theta)^2}{2g}\\) \\) Horizontal range (total horizontal distance traveled): \\( \\(R=\\frac{v_0^2\\sin(2\\theta)}{g}\\) \\) 3. Effect of Initial Conditions 3.1 Influence of Launch Angle \\(\\theta\\) The horizontal range is maximized when \\(\\theta=45^\\circ\\) , as \\(\\sin(2\\theta)\\) reaches its maximum at this angle. At lower angles, the projectile travels farther horizontally but remains in the air for a shorter duration. At higher angles, the projectile reaches greater heights but covers less horizontal distance. 3.2 Influence of Initial Velocity \\(v_0\\) A greater initial velocity increases both the range and the maximum height . The relationship between range and initial velocity is quadratic: \\(R\\propto v_0^2\\) . 3.3 Influence of Gravitational Acceleration \\(g\\) Higher values of \\(g\\) (such as on planets with stronger gravity) reduce both the maximum height and horizontal range . The time of flight is inversely proportional to \\(g\\) , meaning weaker gravity results in longer projectile motion. 4. Conclusion The theoretical foundation of projectile motion is based on Newtonian mechanics and kinematic equations. The motion is characterized by: - Independent horizontal and vertical components . - A parabolic trajectory due to constant gravitational acceleration. - A well-defined maximum range at 45\u00b0 launch angle . In the next sections, we will analyze how these theoretical principles apply in practical scenarios and computational simulations. Phython Implimentation import numpy as np import matplotlib.pyplot as plt class ProjectileMotion: def __init__(self, g=9.81): \"\"\"Initialize with gravitational acceleration (m/s\u00b2)\"\"\" self.g = g def calculate_trajectory(self, v0, angle_deg, t_step=0.01): \"\"\" Calculate projectile trajectory Parameters: v0: initial velocity (m/s) angle_deg: launch angle in degrees t_step: time step for calculations Returns: x, y: arrays of x and y coordinates \"\"\" # Convert angle to radians angle_rad = np.radians(angle_deg) # Initial velocity components vx = v0 * np.cos(angle_rad) vy = v0 * np.sin(angle_rad) # Time of flight t_flight = 2 * vy / self.g # Generate time points t = np.arange(0, t_flight + t_step, t_step) # Calculate positions x = vx * t y = vy * t - 0.5 * self.g * t**2 # Filter out negative y values (after hitting ground) valid_indices = y >= 0 return x[valid_indices], y[valid_indices] def get_range(self, v0, angle_deg): \"\"\"Calculate maximum range for given velocity and angle\"\"\" angle_rad = np.radians(angle_deg) return (v0**2 * np.sin(2 * angle_rad)) / self.g def plot_trajectory_comparison(): \"\"\"Plot trajectories for different angles and velocities\"\"\" projectile = ProjectileMotion() # Parameters to compare velocities = [20, 25] # m/s angles = [30, 45, 60] # degrees colors = ['blue', 'red', 'green'] plt.figure(figsize=(12, 8)) # Plot trajectories for v0 in velocities: for angle, color in zip(angles, colors): x, y = projectile.calculate_trajectory(v0, angle) plt.plot(x, y, label=f'v0={v0}m/s, \u03b8={angle}\u00b0', color=color, alpha=0.7 if v0 == 20 else 1) plt.title('Projectile Motion Trajectories') plt.xlabel('Distance (m)') plt.ylabel('Height (m)') plt.grid(True) plt.legend() plt.axis('equal') plt.show() def plot_range_vs_angle(): \"\"\"Plot range vs launch angle\"\"\" projectile = ProjectileMotion() v0 = 20 # constant velocity of 20 m/s # Generate angles from 0 to 90 degrees angles = np.arange(0, 91, 1) ranges = [projectile.get_range(v0, angle) for angle in angles] plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, 'b-') plt.title(f'Range vs Launch Angle (v0 = {v0} m/s)') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.grid(True) # Mark maximum range (should be at 45\u00b0) max_range = max(ranges) max_angle = angles[ranges.index(max_range)] plt.plot(max_angle, max_range, 'ro', label=f'Max range = {max_range:.1f}m at {max_angle}\u00b0') plt.legend() plt.show() def main(): \"\"\"Main function to run simulations\"\"\" projectile = ProjectileMotion() # Example scenario v0 = 20 # m/s angle = 45 # degrees # Calculate and print single trajectory info x, y = projectile.calculate_trajectory(v0, angle) max_range = projectile.get_range(v0, angle) print(f\"Initial velocity: {v0} m/s\") print(f\"Launch angle: {angle}\u00b0\") print(f\"Maximum range: {max_range:.2f} m\") print(f\"Maximum height: {max(y):.2f} m\") # Generate comparison plots plot_trajectory_comparison() plot_range_vs_angle() if __name__ == \"__main__\": main() Plot","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-background","text":"","title":"1. Theoretical Background"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-foundation-of-projectile-motion","text":"","title":"Theoretical Foundation of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-introduction","text":"Projectile motion is a fundamental topic in classical mechanics that describes the motion of an object under the influence of gravity. This motion can be analyzed by breaking it into two independent components: horizontal motion (constant velocity) and vertical motion (uniformly accelerated motion). The governing equations of motion can be derived using Newton\u2019s laws.","title":"1. Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-derivation-of-governing-equations","text":"To analyze projectile motion, we consider an object launched with an initial velocity \\(v_0\\) at an angle of projection \\(\\theta\\) from the horizontal. The motion is influenced by gravitational acceleration \\(g\\) , assuming air resistance is negligible.","title":"2. Derivation of Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-equations-of-motion","text":"Using kinematic equations, we resolve the motion into horizontal and vertical components: Horizontal displacement \\(x(t)\\) : \\( \\(x=v_0\\cos\\theta\\cdot t\\) \\) Vertical displacement \\(y(t)\\) : \\( \\(y=v_0\\sin\\theta\\cdot t-\\frac{1}{2}gt^2\\) \\) Horizontal velocity \\(v_x(t)\\) : \\( \\(v_x=v_0\\cos\\theta\\) \\) (Since there is no acceleration in the horizontal direction, the velocity remains constant.) Vertical velocity \\(v_y(t)\\) : \\( \\(v_y=v_0\\sin\\theta-gt\\) \\) Time of flight (when the projectile returns to the initial height \\(y=0\\) ): \\( \\(t_f=\\frac{2v_0\\sin\\theta}{g}\\) \\) Maximum height (when vertical velocity becomes zero, \\(v_y=0\\) ): \\( \\(H=\\frac{(v_0\\sin\\theta)^2}{2g}\\) \\) Horizontal range (total horizontal distance traveled): \\( \\(R=\\frac{v_0^2\\sin(2\\theta)}{g}\\) \\)","title":"2.1 Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-effect-of-initial-conditions","text":"","title":"3. Effect of Initial Conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-influence-of-launch-angle-theta","text":"The horizontal range is maximized when \\(\\theta=45^\\circ\\) , as \\(\\sin(2\\theta)\\) reaches its maximum at this angle. At lower angles, the projectile travels farther horizontally but remains in the air for a shorter duration. At higher angles, the projectile reaches greater heights but covers less horizontal distance.","title":"3.1 Influence of Launch Angle \\(\\theta\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#32-influence-of-initial-velocity-v_0","text":"A greater initial velocity increases both the range and the maximum height . The relationship between range and initial velocity is quadratic: \\(R\\propto v_0^2\\) .","title":"3.2 Influence of Initial Velocity \\(v_0\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#33-influence-of-gravitational-acceleration-g","text":"Higher values of \\(g\\) (such as on planets with stronger gravity) reduce both the maximum height and horizontal range . The time of flight is inversely proportional to \\(g\\) , meaning weaker gravity results in longer projectile motion.","title":"3.3 Influence of Gravitational Acceleration \\(g\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-conclusion","text":"The theoretical foundation of projectile motion is based on Newtonian mechanics and kinematic equations. The motion is characterized by: - Independent horizontal and vertical components . - A parabolic trajectory due to constant gravitational acceleration. - A well-defined maximum range at 45\u00b0 launch angle . In the next sections, we will analyze how these theoretical principles apply in practical scenarios and computational simulations.","title":"4. Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#phython-implimentation","text":"import numpy as np import matplotlib.pyplot as plt class ProjectileMotion: def __init__(self, g=9.81): \"\"\"Initialize with gravitational acceleration (m/s\u00b2)\"\"\" self.g = g def calculate_trajectory(self, v0, angle_deg, t_step=0.01): \"\"\" Calculate projectile trajectory Parameters: v0: initial velocity (m/s) angle_deg: launch angle in degrees t_step: time step for calculations Returns: x, y: arrays of x and y coordinates \"\"\" # Convert angle to radians angle_rad = np.radians(angle_deg) # Initial velocity components vx = v0 * np.cos(angle_rad) vy = v0 * np.sin(angle_rad) # Time of flight t_flight = 2 * vy / self.g # Generate time points t = np.arange(0, t_flight + t_step, t_step) # Calculate positions x = vx * t y = vy * t - 0.5 * self.g * t**2 # Filter out negative y values (after hitting ground) valid_indices = y >= 0 return x[valid_indices], y[valid_indices] def get_range(self, v0, angle_deg): \"\"\"Calculate maximum range for given velocity and angle\"\"\" angle_rad = np.radians(angle_deg) return (v0**2 * np.sin(2 * angle_rad)) / self.g def plot_trajectory_comparison(): \"\"\"Plot trajectories for different angles and velocities\"\"\" projectile = ProjectileMotion() # Parameters to compare velocities = [20, 25] # m/s angles = [30, 45, 60] # degrees colors = ['blue', 'red', 'green'] plt.figure(figsize=(12, 8)) # Plot trajectories for v0 in velocities: for angle, color in zip(angles, colors): x, y = projectile.calculate_trajectory(v0, angle) plt.plot(x, y, label=f'v0={v0}m/s, \u03b8={angle}\u00b0', color=color, alpha=0.7 if v0 == 20 else 1) plt.title('Projectile Motion Trajectories') plt.xlabel('Distance (m)') plt.ylabel('Height (m)') plt.grid(True) plt.legend() plt.axis('equal') plt.show() def plot_range_vs_angle(): \"\"\"Plot range vs launch angle\"\"\" projectile = ProjectileMotion() v0 = 20 # constant velocity of 20 m/s # Generate angles from 0 to 90 degrees angles = np.arange(0, 91, 1) ranges = [projectile.get_range(v0, angle) for angle in angles] plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, 'b-') plt.title(f'Range vs Launch Angle (v0 = {v0} m/s)') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.grid(True) # Mark maximum range (should be at 45\u00b0) max_range = max(ranges) max_angle = angles[ranges.index(max_range)] plt.plot(max_angle, max_range, 'ro', label=f'Max range = {max_range:.1f}m at {max_angle}\u00b0') plt.legend() plt.show() def main(): \"\"\"Main function to run simulations\"\"\" projectile = ProjectileMotion() # Example scenario v0 = 20 # m/s angle = 45 # degrees # Calculate and print single trajectory info x, y = projectile.calculate_trajectory(v0, angle) max_range = projectile.get_range(v0, angle) print(f\"Initial velocity: {v0} m/s\") print(f\"Launch angle: {angle}\u00b0\") print(f\"Maximum range: {max_range:.2f} m\") print(f\"Maximum height: {max(y):.2f} m\") # Generate comparison plots plot_trajectory_comparison() plot_range_vs_angle() if __name__ == \"__main__\": main()","title":"Phython Implimentation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot","text":"","title":"Plot"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}