{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Introduction Have you ever wondered how a soccer ball follows a curved path when kicked? Or how rockets and missiles follow precise trajectories? This is all because of projectile motion ! In this report, i will explore how the range of a projectile depends on the launch angle and break it down step by step. 2. What is Projectile Motion? Projectile motion happens when an object is launched into the air and moves under the influence of gravity . The motion can be split into two parts: Horizontal motion : The object moves forward with a constant speed. Vertical motion : The object moves up and down due to gravity. To understand projectile motion better, let's derive some important equations. 3. Key Equations of Motion 3.1 Breaking Motion into Components If an object is launched with an initial speed \\(v_0\\) at an angle \\(\\theta\\) , we can break this velocity into: Horizontal velocity : \\(v_x=v_0\\cos\\theta\\) Vertical velocity : \\(v_y=v_0\\sin\\theta\\) Since gravity only affects vertical motion , the horizontal velocity stays constant . 3.2 Equations for Position and Velocity Using basic physics formulas, we get: 1\ufe0f\u20e3 Horizontal position (distance traveled in time \\(t\\) ) : \\[x=v_0\\cos\\theta\\cdot t\\] 2\ufe0f\u20e3 Vertical position (height at time \\(t\\) ) : \\[y=v_0\\sin\\theta\\cdot t-\\frac{1}{2}gt^2\\] 3\ufe0f\u20e3 Velocity in the horizontal direction (always constant): \\[v_x=v_0\\cos\\theta\\] 4\ufe0f\u20e3 Velocity in the vertical direction (changes due to gravity): \\[v_y=v_0\\sin\\theta-gt\\] 3.3 Finding Special Points Now let's look at some important moments in the projectile\u2019s motion. \u2714\ufe0f Time of Flight (How long the object stays in the air): \\[t_f=\\frac{2v_0\\sin\\theta}{g}\\] \u2714\ufe0f Maximum Height (The highest point the object reaches): \\[H=\\frac{(v_0\\sin\\theta)^2}{2g}\\] \u2714\ufe0f Range (Total Distance the Object Travels Before Hitting the Ground) : \\[R=\\frac{v_0^2\\sin(2\\theta)}{g}\\] Interesting Fact: The projectile travels the longest distance when launched at 45\u00b0 because \\(\\sin(2\\theta)\\) is largest at this angle. Why Does a Projectile Travel the Farthest at 45\u00b0? \ud83d\udd39 The Optimal Angle: 45\u00b0 At 45\u00b0 , the velocity is split equally between horizontal and vertical directions, creating the perfect balance between airtime and forward motion . Mathematically, the range of a projectile is given by: \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] where: \\(R\\) = range of the projectile, \\(v_0\\) = initial velocity, \\(\\theta\\) = launch angle, \\(g\\) = acceleration due to gravity. The function \\(\\sin 2\\theta\\) reaches its maximum value when: \\[ 2\\theta = 90^\\circ \\quad \\Rightarrow \\quad \\theta = 45^\\circ \\] Thus, a projectile launched at 45\u00b0 travels the farthest distance because it achieves the optimal balance between horizontal and vertical motion. 4. Family of Solutions The equations above describe a family of solutions depending on different values of: Launch speed ( \\(v_0\\) ) : Faster projectiles travel farther and higher. The initial speed determines the kinetic energy and range: \\(v_0 = 15\\) m/s \u2192 short trajectory \\(v_0 = 20\\) m/s \u2192 medium \\(v_0 = 25\\) m/s \u2192 long and high trajectory Launch angle ( \\(\\theta\\) ) : Determines the shape of the trajectory. The launch angle determines how the initial speed is split into horizontal and vertical components: Low angle (30\u00b0) : Strong horizontal motion, short airtime \u2192 low flat trajectory. Optimal angle (45\u00b0) : Perfect balance of height and range \u2192 maximum horizontal distance. High angle (60\u00b0) : High arc, longer airtime but shorter range. Gravity ( \\(g\\) ) : Affects how quickly the projectile falls. The gravitational pull affects both maximum height and time of flight . Planet \ud83c\udf0d Gravity \\(g\\) (m/s\u00b2) Earth 9.81 Mars 3.71 Moon 1.62 On the Moon , projectiles rise higher and stay in the air much longer. On Mars , the behavior is intermediate between Moon and Earth. Initial height ( \\(h\\) ) : Changes the total flight time and range. Initial height \\(h\\) changes how far the projectile travels before hitting the ground . \\(h = 0\\) m : Launch from ground. \\(h = 10\\) m : Launch from a platform. \\(h = 20\\) m : Launch from a rooftop/mountain. By adjusting these values, we get different possible trajectories , from low and fast motions (like bullets) to high and slow ones (like thrown balls). 5. Limitations of the Idealized Model The equations we used assume an ideal world where: \u274c No air resistance : In reality, air slows down projectiles. \u274c Flat ground assumption : The model assumes the projectile lands at the same height. \u274c Constant gravity ( \\(g\\) ) : Gravity actually changes with altitude. Because of these assumptions, our equations give approximate results in the real world. 6. Extending the Model: Real-World Effects To make the model more realistic , we can add: \u2705 Air Resistance (Drag Force) The force slows the projectile down. The drag force is proportional to the square of the velocity: \\[F_d=\\frac{1}{2} C_d \\rho A v^2\\] where \\(C_d\\) is the drag coefficient, \\(\\rho\\) is air density, and \\(A\\) is the cross-sectional area. \u2705 Wind Effects A tailwind increases range, while a headwind decreases it. A tailwind adds to horizontal velocity \u2192 increases range. A headwind subtracts \u2192 reduces distance. Crosswind : affects side motion (not modeled here but relevant in real life). \u2705 Launch Altitude At high altitudes, air resistance is lower, and gravity is weaker, so objects travel farther . \u2705 Rotation of the Earth (Coriolis Effect) Important for long-range artillery and missiles. On a rotating Earth, especially at large scales (e.g., missiles, satellites), the Coriolis force causes the projectile to deviate: - In the Northern Hemisphere: rightward deflection. - In the Southern Hemisphere: leftward deflection. 7. Real-World Applications \ud83c\udf0d Projectile motion is not just for physics classes! It applies to: Sports : How football players kick the ball at different angles. Military : How missiles and bullets are fired for maximum range. Space Exploration : How rockets are launched at precise angles. Phython Implimentation import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # Gravity (m/s^2) angles = [45] # Fixed launch angle velocities = [30, 40, 50] # Different initial velocities (m/s) colors = ['red', 'purple', 'green'] # Colors for different trajectories plt.figure(figsize=(8, 5)) # Loop through each velocity and plot trajectory for v0, color in zip(velocities, colors): t_flight = 2 * v0 * np.sin(np.radians(angles[0])) / g # Time of flight t = np.linspace(0, t_flight, num=100) # Time intervals x = v0 * np.cos(np.radians(angles[0])) * t # Horizontal distance y = v0 * np.sin(np.radians(angles[0])) * t - 0.5 * g * t**2 # Vertical distance plt.plot(x, y, label=f'{v0} m/s', color=color) # Labels and grid plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion at 45\u00b0 with Different Initial Velocities\") plt.legend() plt.grid() plt.show() Plot colablink 8. Conclusion Now we u understand the key ideas behind projectile motion: It has both horizontal and vertical movement . Gravity only affects the vertical motion . The best angle for the longest range is 45\u00b0 . The initial speed, angle, and gravity all affect the motion . The real world includes air resistance, wind, and altitude effects . Understanding these principles helps in designing better sports strategies, video game physics, and even launching space missions!","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-introduction","text":"Have you ever wondered how a soccer ball follows a curved path when kicked? Or how rockets and missiles follow precise trajectories? This is all because of projectile motion ! In this report, i will explore how the range of a projectile depends on the launch angle and break it down step by step.","title":"1. Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-what-is-projectile-motion","text":"Projectile motion happens when an object is launched into the air and moves under the influence of gravity . The motion can be split into two parts: Horizontal motion : The object moves forward with a constant speed. Vertical motion : The object moves up and down due to gravity. To understand projectile motion better, let's derive some important equations.","title":"2. What is Projectile Motion?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-key-equations-of-motion","text":"","title":"3. Key Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#31-breaking-motion-into-components","text":"If an object is launched with an initial speed \\(v_0\\) at an angle \\(\\theta\\) , we can break this velocity into: Horizontal velocity : \\(v_x=v_0\\cos\\theta\\) Vertical velocity : \\(v_y=v_0\\sin\\theta\\) Since gravity only affects vertical motion , the horizontal velocity stays constant .","title":"3.1 Breaking Motion into Components"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#32-equations-for-position-and-velocity","text":"Using basic physics formulas, we get: 1\ufe0f\u20e3 Horizontal position (distance traveled in time \\(t\\) ) : \\[x=v_0\\cos\\theta\\cdot t\\] 2\ufe0f\u20e3 Vertical position (height at time \\(t\\) ) : \\[y=v_0\\sin\\theta\\cdot t-\\frac{1}{2}gt^2\\] 3\ufe0f\u20e3 Velocity in the horizontal direction (always constant): \\[v_x=v_0\\cos\\theta\\] 4\ufe0f\u20e3 Velocity in the vertical direction (changes due to gravity): \\[v_y=v_0\\sin\\theta-gt\\]","title":"3.2 Equations for Position and Velocity"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#33-finding-special-points","text":"Now let's look at some important moments in the projectile\u2019s motion. \u2714\ufe0f Time of Flight (How long the object stays in the air): \\[t_f=\\frac{2v_0\\sin\\theta}{g}\\] \u2714\ufe0f Maximum Height (The highest point the object reaches): \\[H=\\frac{(v_0\\sin\\theta)^2}{2g}\\] \u2714\ufe0f Range (Total Distance the Object Travels Before Hitting the Ground) : \\[R=\\frac{v_0^2\\sin(2\\theta)}{g}\\]","title":"3.3 Finding Special Points"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#interesting-fact-the-projectile-travels-the-longest-distance-when-launched-at-45-because-sin2theta-is-largest-at-this-angle","text":"","title":"Interesting Fact: The projectile travels the longest distance when launched at 45\u00b0 because \\(\\sin(2\\theta)\\) is largest at this angle."},{"location":"1%20Physics/1%20Mechanics/Problem_1/#why-does-a-projectile-travel-the-farthest-at-45","text":"","title":"Why Does a Projectile Travel the Farthest at 45\u00b0?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#the-optimal-angle-45","text":"At 45\u00b0 , the velocity is split equally between horizontal and vertical directions, creating the perfect balance between airtime and forward motion . Mathematically, the range of a projectile is given by: \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] where: \\(R\\) = range of the projectile, \\(v_0\\) = initial velocity, \\(\\theta\\) = launch angle, \\(g\\) = acceleration due to gravity. The function \\(\\sin 2\\theta\\) reaches its maximum value when: \\[ 2\\theta = 90^\\circ \\quad \\Rightarrow \\quad \\theta = 45^\\circ \\] Thus, a projectile launched at 45\u00b0 travels the farthest distance because it achieves the optimal balance between horizontal and vertical motion.","title":"\ud83d\udd39 The Optimal Angle: 45\u00b0"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-family-of-solutions","text":"The equations above describe a family of solutions depending on different values of: Launch speed ( \\(v_0\\) ) : Faster projectiles travel farther and higher. The initial speed determines the kinetic energy and range: \\(v_0 = 15\\) m/s \u2192 short trajectory \\(v_0 = 20\\) m/s \u2192 medium \\(v_0 = 25\\) m/s \u2192 long and high trajectory Launch angle ( \\(\\theta\\) ) : Determines the shape of the trajectory. The launch angle determines how the initial speed is split into horizontal and vertical components: Low angle (30\u00b0) : Strong horizontal motion, short airtime \u2192 low flat trajectory. Optimal angle (45\u00b0) : Perfect balance of height and range \u2192 maximum horizontal distance. High angle (60\u00b0) : High arc, longer airtime but shorter range. Gravity ( \\(g\\) ) : Affects how quickly the projectile falls. The gravitational pull affects both maximum height and time of flight . Planet \ud83c\udf0d Gravity \\(g\\) (m/s\u00b2) Earth 9.81 Mars 3.71 Moon 1.62 On the Moon , projectiles rise higher and stay in the air much longer. On Mars , the behavior is intermediate between Moon and Earth. Initial height ( \\(h\\) ) : Changes the total flight time and range. Initial height \\(h\\) changes how far the projectile travels before hitting the ground . \\(h = 0\\) m : Launch from ground. \\(h = 10\\) m : Launch from a platform. \\(h = 20\\) m : Launch from a rooftop/mountain. By adjusting these values, we get different possible trajectories , from low and fast motions (like bullets) to high and slow ones (like thrown balls).","title":"4. Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-limitations-of-the-idealized-model","text":"The equations we used assume an ideal world where: \u274c No air resistance : In reality, air slows down projectiles. \u274c Flat ground assumption : The model assumes the projectile lands at the same height. \u274c Constant gravity ( \\(g\\) ) : Gravity actually changes with altitude. Because of these assumptions, our equations give approximate results in the real world.","title":"5. Limitations of the Idealized Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#6-extending-the-model-real-world-effects","text":"To make the model more realistic , we can add: \u2705 Air Resistance (Drag Force) The force slows the projectile down. The drag force is proportional to the square of the velocity: \\[F_d=\\frac{1}{2} C_d \\rho A v^2\\] where \\(C_d\\) is the drag coefficient, \\(\\rho\\) is air density, and \\(A\\) is the cross-sectional area. \u2705 Wind Effects A tailwind increases range, while a headwind decreases it. A tailwind adds to horizontal velocity \u2192 increases range. A headwind subtracts \u2192 reduces distance. Crosswind : affects side motion (not modeled here but relevant in real life). \u2705 Launch Altitude At high altitudes, air resistance is lower, and gravity is weaker, so objects travel farther . \u2705 Rotation of the Earth (Coriolis Effect) Important for long-range artillery and missiles. On a rotating Earth, especially at large scales (e.g., missiles, satellites), the Coriolis force causes the projectile to deviate: - In the Northern Hemisphere: rightward deflection. - In the Southern Hemisphere: leftward deflection.","title":"6. Extending the Model: Real-World Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#7-real-world-applications","text":"Projectile motion is not just for physics classes! It applies to: Sports : How football players kick the ball at different angles. Military : How missiles and bullets are fired for maximum range. Space Exploration : How rockets are launched at precise angles.","title":"7. Real-World Applications \ud83c\udf0d"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#phython-implimentation","text":"import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # Gravity (m/s^2) angles = [45] # Fixed launch angle velocities = [30, 40, 50] # Different initial velocities (m/s) colors = ['red', 'purple', 'green'] # Colors for different trajectories plt.figure(figsize=(8, 5)) # Loop through each velocity and plot trajectory for v0, color in zip(velocities, colors): t_flight = 2 * v0 * np.sin(np.radians(angles[0])) / g # Time of flight t = np.linspace(0, t_flight, num=100) # Time intervals x = v0 * np.cos(np.radians(angles[0])) * t # Horizontal distance y = v0 * np.sin(np.radians(angles[0])) * t - 0.5 * g * t**2 # Vertical distance plt.plot(x, y, label=f'{v0} m/s', color=color) # Labels and grid plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion at 45\u00b0 with Different Initial Velocities\") plt.legend() plt.grid() plt.show()","title":"Phython Implimentation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot","text":"","title":"Plot"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#colablink","text":"","title":"colablink"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#8-conclusion","text":"Now we u understand the key ideas behind projectile motion: It has both horizontal and vertical movement . Gravity only affects the vertical motion . The best angle for the longest range is 45\u00b0 . The initial speed, angle, and gravity all affect the motion . The real world includes air resistance, wind, and altitude effects . Understanding these principles helps in designing better sports strategies, video game physics, and even launching space missions!","title":"8. Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation The forced damped pendulum is a system that exhibits a wide range of behaviors, from simple periodic oscillations to chaotic motion . The equation governing its motion is: \\[\\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2\\sin\\theta = A\\cos(\\omega t)\\] where: - \\(\\theta\\) = angular displacement (radians) - \\(\\gamma\\) = damping coefficient (determines energy loss over time) - \\(\\omega_0\\) = natural frequency of the pendulum, given by: \\[\\omega_0^2=\\frac{g}{L}\\] where \\(g\\) is the acceleration due to gravity and \\(L\\) is the pendulum length - \\(A\\) = amplitude of the external driving force - \\(\\omega\\) = driving frequency of the external force 1.1 Small-Angle Approximation For small oscillations , we approximate: \\[\\sin\\theta \\approx \\theta\\] Substituting this approximation into the equation of motion simplifies it to: \\[\\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2\\theta = A\\cos(\\omega t)\\] This is now a linear differential equation , which can be solved analytically. The general solution consists of two parts: Homogeneous solution (natural motion of the damped pendulum): \\[\\theta_h(t) = e^{-\\gamma t/2} (C_1\\cos(\\omega_d t) + C_2\\sin(\\omega_d t))\\] where the damped frequency is: \\[\\omega_d = \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{4}}\\] Particular solution (response to the external force): \\[\\theta_p(t) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2\\omega^2}} \\cos(\\omega t - \\phi)\\] where the phase shift \\(\\phi\\) is given by: \\[\\tan\\phi = \\frac{\\gamma\\omega}{\\omega_0^2 - \\omega^2}\\] The total solution is: \\[\\theta(t) = \\theta_h(t) + \\theta_p(t)\\] 1.2 Resonance Condition Resonance occurs when the driving frequency matches the system\u2019s natural frequency: \\[\\omega \\approx \\omega_0\\] At resonance, the amplitude of oscillations increases significantly , which can lead to extreme behaviors in real-world systems (e.g., structural failures in bridges or mechanical components). 1.3 Energy Exchange in the System The energy in the forced damped pendulum consists of: Kinetic energy : \\[KE = \\frac{1}{2} m L^2 \\dot{\\theta}^2\\] Potential energy : \\[PE = mgL(1 - \\cos\\theta)\\] Total energy : \\[E = KE + PE\\] Over time, damping ( \\(\\gamma\\) ) removes energy from the system, while the external force ( \\(A\\cos(\\omega t)\\) ) injects energy. The balance between these competing effects determines the system\u2019s long-term behavior. 2. Analysis of Dynamics \ud83d\udcca 2.1 Influence of System Parameters The behavior of the pendulum depends on: - Damping \\(\\gamma\\) : - High damping: Oscillations die out quickly. - Low damping: Sustained oscillations, possibly chaotic motion. - Driving force amplitude \\(A\\) : - Small \\(A\\) : Regular oscillations. - Large \\(A\\) : Large amplitude, possibly chaotic motion. - Driving frequency \\(\\omega\\) : - Near \\(\\omega_0\\) : Resonance can occur. - Far from \\(\\omega_0\\) : No significant amplification. 2.2 Types of Motion Observed Depending on the parameter values, the system exhibits: \u2705 Periodic motion (stable oscillations) \u2705 Resonance (sharp amplitude increase at specific frequencies) \u2705 Quasi-periodic motion (oscillations with two incommensurate frequencies) \u2705 Chaotic motion (unpredictable behavior due to sensitivity to initial conditions) 3. Practical Applications \ud83c\udf0d The forced damped pendulum model is useful in: \u2705 Energy harvesting (pendulum-based generators converting mechanical energy into electricity) \u2705 Suspension bridge analysis (to prevent resonance-induced collapses like Tacoma Narrows Bridge) \u2705 Electrical circuits (driven RLC circuits behave analogously) \u2705 Biomechanics (understanding human walking and balance) 4. Simulation and Visualization of Pendulum Dynamics To better understand how different physical effects influence a pendulum's behavior, we simulate four distinct scenarios using numerical integration of the equation: \\[\\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A\\cos(\\omega t)\\] where: - \\(b\\) is the damping coefficient, - \\(A\\) is the amplitude of the external driving force, - \\(\\omega\\) is the driving frequency. Each scenario is visualized with: - \u03b8(t) \u2014 how the angle changes over time - Phase diagram (\u03b8, \u03c9) \u2014 angular displacement vs angular velocity 4.1 \ud83d\udfe2 Simple Undamped Pendulum (No Damping, No Forcing) Parameters: \\(b = 0\\) , \\(A = 0\\) The pendulum swings indefinitely with no energy loss. The motion is periodic and predictable. Expected plots: - The angle \\(\\theta(t)\\) oscillates sinusoidally. The phase diagram forms a closed ellipse, showing conservation of energy. 4.2 \ud83d\udd35 Damped Pendulum (With Friction, No External Force) Parameters: \\(b > 0\\) , \\(A = 0\\) The pendulum gradually loses energy due to damping. Oscillations decay over time until the system comes to rest. Expected plots: - \\(\\theta(t)\\) decreases exponentially and eventually stops. The phase diagram spirals toward the origin. 4.3 \ud83d\udfe1 Forced Undamped Pendulum (No Friction, External Periodic Force) Parameters: \\(b = 0\\) , \\(A > 0\\) The system is continuously driven by a periodic force. If driving frequency is close to the natural frequency, resonance may occur. Expected plots: - \\(\\theta(t)\\) shows growing oscillations or steady amplitude depending on \\(\\omega\\) . The phase diagram shows a stable closed loop or expanding spiral. 4.4 \ud83d\udd34 Forced Damped Pendulum (With Friction and Driving Force) We examine two interesting cases: (a) Resonance-like Behavior Parameters: \\(b\\) small, \\(A\\) moderate, \\(\\omega \\approx \\omega_0\\) System reaches steady oscillations with large amplitude. (b) Chaotic Motion Parameters: \\(b\\) small, \\(A\\) high, \\(\\omega\\) tuned for chaos Sensitive to initial conditions, unpredictable long-term behavior. Summary of Results These simulations highlight how small changes in damping or forcing can drastically shift the pendulum\u2019s behavior\u2014from regular motion to chaos. The phase diagrams are especially useful in visualizing the transition from order to chaos. Code import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants g = 9.81 L = 1.0 omega0 = np.sqrt(g / L) # Differential equation def pendulum(t, y, b, A, omega): theta, omega_ = y dtheta_dt = omega_ domega_dt = -b * omega_ - omega0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Solver wrapper def simulate(b, A, omega, theta0=0.2, omega0_=0, t_max=30): y0 = [theta0, omega0_] t_eval = np.linspace(0, t_max, 3000) sol = solve_ivp(pendulum, [0, t_max], y0, args=(b, A, omega), t_eval=t_eval, rtol=1e-8) return sol.t, sol.y[0], sol.y[1] # Plotting function def plot_pendulum(t, theta, omega, title_prefix, fig_num): plt.figure(fig_num) plt.plot(t, theta) plt.title(f'{title_prefix}: Angle vs Time') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.grid() plt.savefig(f'{title_prefix}_theta_time.png') plt.figure(fig_num + 1) plt.plot(theta, omega) plt.title(f'{title_prefix}: Phase Diagram') plt.xlabel('Angle (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.grid() plt.savefig(f'{title_prefix}_phase.png') # 1. Simple Pendulum (no damping, no forcing) t, th, om = simulate(b=0, A=0, omega=0) plot_pendulum(t, th, om, 'Simple_Pendulum', 1) # 2. Damped Pendulum (damping, no forcing) t, th, om = simulate(b=0.2, A=0, omega=0) plot_pendulum(t, th, om, 'Damped_Pendulum', 3) # 3. Forced Undamped Pendulum (no damping, with driving) t, th, om = simulate(b=0, A=1.2, omega=omega0) plot_pendulum(t, th, om, 'Forced_Undamped', 5) # 4a. Forced Damped Pendulum - Resonance t, th, om = simulate(b=0.1, A=1.2, omega=omega0) plot_pendulum(t, th, om, 'Forced_Damped_Resonance', 7) # 4b. Forced Damped Pendulum - Chaotic (longer sim, more sensitivity) t, th, om = simulate(b=0.2, A=1.5, omega=0.8 * omega0, theta0=1.5, t_max=60) plot_pendulum(t, th, om, 'Forced_Damped_Chaos', 9) --- colablink 5. Conclusion The forced damped pendulum is a powerful model for understanding real-world oscillatory systems. By adjusting damping, forcing, and initial conditions, we can explore periodic, resonant, and chaotic behaviors . Using numerical simulations and phase-space analysis , we can study transitions from simple oscillations to chaos , with applications in engineering, physics, and biomechanics . This report combines theoretical derivations, computational techniques, and real-world applications to provide a deep understanding of the system.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The forced damped pendulum is a system that exhibits a wide range of behaviors, from simple periodic oscillations to chaotic motion . The equation governing its motion is: \\[\\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2\\sin\\theta = A\\cos(\\omega t)\\] where: - \\(\\theta\\) = angular displacement (radians) - \\(\\gamma\\) = damping coefficient (determines energy loss over time) - \\(\\omega_0\\) = natural frequency of the pendulum, given by: \\[\\omega_0^2=\\frac{g}{L}\\] where \\(g\\) is the acceleration due to gravity and \\(L\\) is the pendulum length - \\(A\\) = amplitude of the external driving force - \\(\\omega\\) = driving frequency of the external force","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-small-angle-approximation","text":"For small oscillations , we approximate: \\[\\sin\\theta \\approx \\theta\\] Substituting this approximation into the equation of motion simplifies it to: \\[\\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2\\theta = A\\cos(\\omega t)\\] This is now a linear differential equation , which can be solved analytically. The general solution consists of two parts: Homogeneous solution (natural motion of the damped pendulum): \\[\\theta_h(t) = e^{-\\gamma t/2} (C_1\\cos(\\omega_d t) + C_2\\sin(\\omega_d t))\\] where the damped frequency is: \\[\\omega_d = \\sqrt{\\omega_0^2 - \\frac{\\gamma^2}{4}}\\] Particular solution (response to the external force): \\[\\theta_p(t) = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2\\omega^2}} \\cos(\\omega t - \\phi)\\] where the phase shift \\(\\phi\\) is given by: \\[\\tan\\phi = \\frac{\\gamma\\omega}{\\omega_0^2 - \\omega^2}\\] The total solution is: \\[\\theta(t) = \\theta_h(t) + \\theta_p(t)\\]","title":"1.1 Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#12-resonance-condition","text":"Resonance occurs when the driving frequency matches the system\u2019s natural frequency: \\[\\omega \\approx \\omega_0\\] At resonance, the amplitude of oscillations increases significantly , which can lead to extreme behaviors in real-world systems (e.g., structural failures in bridges or mechanical components).","title":"1.2 Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#13-energy-exchange-in-the-system","text":"The energy in the forced damped pendulum consists of: Kinetic energy : \\[KE = \\frac{1}{2} m L^2 \\dot{\\theta}^2\\] Potential energy : \\[PE = mgL(1 - \\cos\\theta)\\] Total energy : \\[E = KE + PE\\] Over time, damping ( \\(\\gamma\\) ) removes energy from the system, while the external force ( \\(A\\cos(\\omega t)\\) ) injects energy. The balance between these competing effects determines the system\u2019s long-term behavior.","title":"1.3 Energy Exchange in the System"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics \ud83d\udcca"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#21-influence-of-system-parameters","text":"The behavior of the pendulum depends on: - Damping \\(\\gamma\\) : - High damping: Oscillations die out quickly. - Low damping: Sustained oscillations, possibly chaotic motion. - Driving force amplitude \\(A\\) : - Small \\(A\\) : Regular oscillations. - Large \\(A\\) : Large amplitude, possibly chaotic motion. - Driving frequency \\(\\omega\\) : - Near \\(\\omega_0\\) : Resonance can occur. - Far from \\(\\omega_0\\) : No significant amplification.","title":"2.1 Influence of System Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#22-types-of-motion-observed","text":"Depending on the parameter values, the system exhibits: \u2705 Periodic motion (stable oscillations) \u2705 Resonance (sharp amplitude increase at specific frequencies) \u2705 Quasi-periodic motion (oscillations with two incommensurate frequencies) \u2705 Chaotic motion (unpredictable behavior due to sensitivity to initial conditions)","title":"2.2 Types of Motion Observed"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum model is useful in: \u2705 Energy harvesting (pendulum-based generators converting mechanical energy into electricity) \u2705 Suspension bridge analysis (to prevent resonance-induced collapses like Tacoma Narrows Bridge) \u2705 Electrical circuits (driven RLC circuits behave analogously) \u2705 Biomechanics (understanding human walking and balance)","title":"3. Practical Applications \ud83c\udf0d"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-simulation-and-visualization-of-pendulum-dynamics","text":"To better understand how different physical effects influence a pendulum's behavior, we simulate four distinct scenarios using numerical integration of the equation: \\[\\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A\\cos(\\omega t)\\] where: - \\(b\\) is the damping coefficient, - \\(A\\) is the amplitude of the external driving force, - \\(\\omega\\) is the driving frequency. Each scenario is visualized with: - \u03b8(t) \u2014 how the angle changes over time - Phase diagram (\u03b8, \u03c9) \u2014 angular displacement vs angular velocity","title":"4. Simulation and Visualization of Pendulum Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#41-simple-undamped-pendulum-no-damping-no-forcing","text":"Parameters: \\(b = 0\\) , \\(A = 0\\) The pendulum swings indefinitely with no energy loss. The motion is periodic and predictable. Expected plots: - The angle \\(\\theta(t)\\) oscillates sinusoidally. The phase diagram forms a closed ellipse, showing conservation of energy.","title":"4.1 \ud83d\udfe2 Simple Undamped Pendulum (No Damping, No Forcing)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#42-damped-pendulum-with-friction-no-external-force","text":"Parameters: \\(b > 0\\) , \\(A = 0\\) The pendulum gradually loses energy due to damping. Oscillations decay over time until the system comes to rest. Expected plots: - \\(\\theta(t)\\) decreases exponentially and eventually stops. The phase diagram spirals toward the origin.","title":"4.2 \ud83d\udd35 Damped Pendulum (With Friction, No External Force)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#43-forced-undamped-pendulum-no-friction-external-periodic-force","text":"Parameters: \\(b = 0\\) , \\(A > 0\\) The system is continuously driven by a periodic force. If driving frequency is close to the natural frequency, resonance may occur. Expected plots: - \\(\\theta(t)\\) shows growing oscillations or steady amplitude depending on \\(\\omega\\) . The phase diagram shows a stable closed loop or expanding spiral.","title":"4.3 \ud83d\udfe1 Forced Undamped Pendulum (No Friction, External Periodic Force)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#44-forced-damped-pendulum-with-friction-and-driving-force","text":"We examine two interesting cases:","title":"4.4 \ud83d\udd34 Forced Damped Pendulum (With Friction and Driving Force)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#a-resonance-like-behavior","text":"Parameters: \\(b\\) small, \\(A\\) moderate, \\(\\omega \\approx \\omega_0\\) System reaches steady oscillations with large amplitude.","title":"(a) Resonance-like Behavior"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#b-chaotic-motion","text":"Parameters: \\(b\\) small, \\(A\\) high, \\(\\omega\\) tuned for chaos Sensitive to initial conditions, unpredictable long-term behavior.","title":"(b) Chaotic Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#summary-of-results","text":"These simulations highlight how small changes in damping or forcing can drastically shift the pendulum\u2019s behavior\u2014from regular motion to chaos. The phase diagrams are especially useful in visualizing the transition from order to chaos. Code import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Constants g = 9.81 L = 1.0 omega0 = np.sqrt(g / L) # Differential equation def pendulum(t, y, b, A, omega): theta, omega_ = y dtheta_dt = omega_ domega_dt = -b * omega_ - omega0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Solver wrapper def simulate(b, A, omega, theta0=0.2, omega0_=0, t_max=30): y0 = [theta0, omega0_] t_eval = np.linspace(0, t_max, 3000) sol = solve_ivp(pendulum, [0, t_max], y0, args=(b, A, omega), t_eval=t_eval, rtol=1e-8) return sol.t, sol.y[0], sol.y[1] # Plotting function def plot_pendulum(t, theta, omega, title_prefix, fig_num): plt.figure(fig_num) plt.plot(t, theta) plt.title(f'{title_prefix}: Angle vs Time') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.grid() plt.savefig(f'{title_prefix}_theta_time.png') plt.figure(fig_num + 1) plt.plot(theta, omega) plt.title(f'{title_prefix}: Phase Diagram') plt.xlabel('Angle (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.grid() plt.savefig(f'{title_prefix}_phase.png') # 1. Simple Pendulum (no damping, no forcing) t, th, om = simulate(b=0, A=0, omega=0) plot_pendulum(t, th, om, 'Simple_Pendulum', 1) # 2. Damped Pendulum (damping, no forcing) t, th, om = simulate(b=0.2, A=0, omega=0) plot_pendulum(t, th, om, 'Damped_Pendulum', 3) # 3. Forced Undamped Pendulum (no damping, with driving) t, th, om = simulate(b=0, A=1.2, omega=omega0) plot_pendulum(t, th, om, 'Forced_Undamped', 5) # 4a. Forced Damped Pendulum - Resonance t, th, om = simulate(b=0.1, A=1.2, omega=omega0) plot_pendulum(t, th, om, 'Forced_Damped_Resonance', 7) # 4b. Forced Damped Pendulum - Chaotic (longer sim, more sensitivity) t, th, om = simulate(b=0.2, A=1.5, omega=0.8 * omega0, theta0=1.5, t_max=60) plot_pendulum(t, th, om, 'Forced_Damped_Chaos', 9) --- colablink","title":"Summary of Results"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-conclusion","text":"The forced damped pendulum is a powerful model for understanding real-world oscillatory systems. By adjusting damping, forcing, and initial conditions, we can explore periodic, resonant, and chaotic behaviors . Using numerical simulations and phase-space analysis , we can study transitions from simple oscillations to chaos , with applications in engineering, physics, and biomechanics . This report combines theoretical derivations, computational techniques, and real-world applications to provide a deep understanding of the system.","title":"5. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Investigating the Orbital Period and Orbital Radius Relationship \u2705 1. Theoretical Foundation \ud83d\udd39 Newton's Law and Circular Motion We begin with Newton's law of universal gravitation : \\[F = \\frac{G M m}{r^2}\\] where: - \\(F\\) is the gravitational force, - \\(G\\) is the gravitational constant \\((6.674 \\times 10^{-11}\\ \\text{Nm}^2/\\text{kg}^2)\\) , - \\(M\\) is the mass of the central body (e.g. the Sun), - \\(m\\) is the mass of the orbiting body, - \\(r\\) is the orbital radius. For circular motion, this gravitational force provides the centripetal force: \\[F = \\frac{m v^2}{r}\\] Equating the two expressions: \\[\\frac{G M m}{r^2} = \\frac{m v^2}{r}\\] Canceling \\(m\\) and solving for velocity \\(v\\) : \\[v^2 = \\frac{G M}{r}\\] We now use the relationship between orbital speed and period: \\[v = \\frac{2\\pi r}{T}\\] Substitute into the velocity equation: \\[\\left(\\frac{2\\pi r}{T}\\right)^2 = \\frac{G M}{r}\\] Expanding and simplifying: \\[\\frac{4\\pi^2 r^2}{T^2} = \\frac{G M}{r}\\] Multiply both sides by \\(r\\) : \\[\\frac{4\\pi^2 r^3}{T^2} = G M\\] Solve for \\(T^2\\) : \\[T^2 = \\frac{4\\pi^2}{G M} r^3\\] \u2705 Interpretation This is Kepler\u2019s Third Law for circular orbits: \\[T^2 \\propto r^3\\] This means that the square of the orbital period is proportional to the cube of the orbital radius , for objects orbiting the same central body. \ud83d\udd39 Why This Matters Kepler\u2019s Third Law is crucial in astronomy: It allows astronomers to calculate planetary masses by observing orbital periods and distances. Helps in measuring distances in space , like between planets or satellites. It is used to detect exoplanets by observing the periodic wobble of stars. Although Kepler derived it empirically, Newton\u2019s law of gravitation explains it theoretically. \u2705 2. Real-World Examples \ud83d\udd39 Example: The Moon Orbiting the Earth Orbital radius: \\(r \\approx 384,400\\) km Orbital period: \\(T \\approx 27.3\\) days = \\(2.36 \\times 10^6\\) seconds Check that \\(T^2 \\propto r^3\\) : \\[T^2 = (2.36 \\times 10^6)^2 \\approx 5.57 \\times 10^{12}$$ $$r^3 = (3.844 \\times 10^8)^3 \\approx 5.69 \\times 10^{25}\\] Their ratio is nearly constant, consistent with the law. \ud83d\udd39 Example: Planets in the Solar System Planet Radius (AU) Period (Years) \\(T^2\\) \\(r^3\\) Mercury 0.39 0.24 0.0576 0.0593 Venus 0.72 0.62 0.3844 0.3732 Earth 1.00 1.00 1.0000 1.0000 Mars 1.52 1.88 3.5344 3.5127 Jupiter 5.20 11.86 140.67 140.61 As you can see, \\(T^2 \\approx r^3\\) . \ud83d\udcc8 Insert Here: Plot of \\(T^2\\) vs \\(r^3\\) using the table above \u2705 3. Computational Modeling (Python) \ud83d\udd39 Simulate Orbital Motion and Periods import numpy as np import matplotlib.pyplot as plt # Constants G = 6.674e-11 M_sun = 1.989e30 # Radii from 0.2 AU to 5 AU AU = 1.496e11 radii = np.linspace(0.2, 5, 10) * AU # Compute periods using Kepler's Law periods = np.sqrt(4 * np.pi**2 * radii**3 / (G * M_sun)) # Plot T^2 vs r^3 plt.figure(figsize=(7, 5)) plt.plot(radii**3, periods**2, 'o-', color='navy') plt.xlabel(\"$r^3$ (m$^3$)\") plt.ylabel(\"$T^2$ (s$^2$)\") plt.title(\"Kepler's Third Law: $T^2$ vs $r^3$\") plt.grid(True) plt.tight_layout() plt.show() \ud83d\udcc8 Insert Here: Simulated Plot of \\(T^2\\) vs \\(r^3\\) \ud83d\udd39 Log-Log Representation \ud83d\udccd Insert this code in a code cell plt.figure(figsize=(7, 5)) plt.plot(np.log10(radii), np.log10(periods), 'o-', color='darkgreen') plt.xlabel(\"$\\log(r)$\") plt.ylabel(\"$\\log(T)$\") plt.title(\"Log-Log Plot: $T \\propto r^{3/2}$\") plt.grid(True) plt.tight_layout() plt.show() \ud83d\udcc8 Insert Here: Log-Log Plot of \\(T\\) vs \\(r\\) \u2705 4. Discussion and Extensions \ud83d\udd39 Elliptical Orbits Kepler\u2019s third law applies to elliptical orbits if we use semi-major axis \\(a\\) instead of radius: \\[T^2 \\propto a^3\\] Newton extended Kepler\u2019s laws by showing they are consequences of the inverse-square gravitational force. This allows generalization beyond circular orbits. \ud83d\udd39 Other Celestial Bodies Binary stars : Kepler's law helps determine stellar masses. Satellites : Used to calculate orbital altitudes and velocities. Space probes : Missions use this law for trajectory design. Exoplanets : Orbital data allows estimation of host star mass. \u2705 5. Application: Estimate Mass of Earth and Sun \ud83d\udd39 Estimate Earth\u2019s Mass from Moon\u2019s Orbit \\[T = 2.36 \\times 10^6\\ \\text{s}, \\quad r = 3.844 \\times 10^8\\ \\text{m}\\] \\[M = \\frac{4\\pi^2 r^3}{G T^2}\\] \ud83d\udccd Insert this code in a code cell T = 2.36e6 r = 3.844e8 G = 6.674e-11 M_earth = 4 * np.pi**2 * r**3 / (G * T**2) print(f\"Estimated Earth mass: {M_earth:.2e} kg\") \ud83d\udd39 Estimate Sun\u2019s Mass from Earth\u2019s Orbit \\[T = 3.156 \\times 10^7\\ \\text{s}, \\quad r = 1.496 \\times 10^{11}\\ \\text{m}\\] \ud83d\udccd Insert this code in a code cell T = 3.156e7 r = 1.496e11 M_sun = 4 * np.pi**2 * r**3 / (G * T**2) print(f\"Estimated Sun mass: {M_sun:.2e} kg\") \u2705 6. Final Deliverables This report includes: \u2705 Full derivation of Kepler\u2019s Third Law \u2705 Real-world examples (Moon, Solar System) \u2705 Python simulation to verify numerically \u2705 Estimation of Earth and Sun masses \u2705 All required plots with labels and titles \u2705 Clean explanations in Markdown with LaTeX \u2705 Suggestions for further exploration","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#investigating-the-orbital-period-and-orbital-radius-relationship","text":"","title":"Investigating the Orbital Period and Orbital Radius Relationship"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-foundation","text":"","title":"\u2705 1. Theoretical Foundation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#newtons-law-and-circular-motion","text":"We begin with Newton's law of universal gravitation : \\[F = \\frac{G M m}{r^2}\\] where: - \\(F\\) is the gravitational force, - \\(G\\) is the gravitational constant \\((6.674 \\times 10^{-11}\\ \\text{Nm}^2/\\text{kg}^2)\\) , - \\(M\\) is the mass of the central body (e.g. the Sun), - \\(m\\) is the mass of the orbiting body, - \\(r\\) is the orbital radius. For circular motion, this gravitational force provides the centripetal force: \\[F = \\frac{m v^2}{r}\\] Equating the two expressions: \\[\\frac{G M m}{r^2} = \\frac{m v^2}{r}\\] Canceling \\(m\\) and solving for velocity \\(v\\) : \\[v^2 = \\frac{G M}{r}\\] We now use the relationship between orbital speed and period: \\[v = \\frac{2\\pi r}{T}\\] Substitute into the velocity equation: \\[\\left(\\frac{2\\pi r}{T}\\right)^2 = \\frac{G M}{r}\\] Expanding and simplifying: \\[\\frac{4\\pi^2 r^2}{T^2} = \\frac{G M}{r}\\] Multiply both sides by \\(r\\) : \\[\\frac{4\\pi^2 r^3}{T^2} = G M\\] Solve for \\(T^2\\) : \\[T^2 = \\frac{4\\pi^2}{G M} r^3\\]","title":"\ud83d\udd39 Newton's Law and Circular Motion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#interpretation","text":"This is Kepler\u2019s Third Law for circular orbits: \\[T^2 \\propto r^3\\] This means that the square of the orbital period is proportional to the cube of the orbital radius , for objects orbiting the same central body.","title":"\u2705 Interpretation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#why-this-matters","text":"Kepler\u2019s Third Law is crucial in astronomy: It allows astronomers to calculate planetary masses by observing orbital periods and distances. Helps in measuring distances in space , like between planets or satellites. It is used to detect exoplanets by observing the periodic wobble of stars. Although Kepler derived it empirically, Newton\u2019s law of gravitation explains it theoretically.","title":"\ud83d\udd39 Why This Matters"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-real-world-examples","text":"","title":"\u2705 2. Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-the-moon-orbiting-the-earth","text":"Orbital radius: \\(r \\approx 384,400\\) km Orbital period: \\(T \\approx 27.3\\) days = \\(2.36 \\times 10^6\\) seconds Check that \\(T^2 \\propto r^3\\) : \\[T^2 = (2.36 \\times 10^6)^2 \\approx 5.57 \\times 10^{12}$$ $$r^3 = (3.844 \\times 10^8)^3 \\approx 5.69 \\times 10^{25}\\] Their ratio is nearly constant, consistent with the law.","title":"\ud83d\udd39 Example: The Moon Orbiting the Earth"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-planets-in-the-solar-system","text":"Planet Radius (AU) Period (Years) \\(T^2\\) \\(r^3\\) Mercury 0.39 0.24 0.0576 0.0593 Venus 0.72 0.62 0.3844 0.3732 Earth 1.00 1.00 1.0000 1.0000 Mars 1.52 1.88 3.5344 3.5127 Jupiter 5.20 11.86 140.67 140.61 As you can see, \\(T^2 \\approx r^3\\) . \ud83d\udcc8 Insert Here: Plot of \\(T^2\\) vs \\(r^3\\) using the table above","title":"\ud83d\udd39 Example: Planets in the Solar System"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-computational-modeling-python","text":"","title":"\u2705 3. Computational Modeling (Python)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#simulate-orbital-motion-and-periods","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.674e-11 M_sun = 1.989e30 # Radii from 0.2 AU to 5 AU AU = 1.496e11 radii = np.linspace(0.2, 5, 10) * AU # Compute periods using Kepler's Law periods = np.sqrt(4 * np.pi**2 * radii**3 / (G * M_sun)) # Plot T^2 vs r^3 plt.figure(figsize=(7, 5)) plt.plot(radii**3, periods**2, 'o-', color='navy') plt.xlabel(\"$r^3$ (m$^3$)\") plt.ylabel(\"$T^2$ (s$^2$)\") plt.title(\"Kepler's Third Law: $T^2$ vs $r^3$\") plt.grid(True) plt.tight_layout() plt.show() \ud83d\udcc8 Insert Here: Simulated Plot of \\(T^2\\) vs \\(r^3\\)","title":"\ud83d\udd39 Simulate Orbital Motion and Periods"},{"location":"1%20Physics/2%20Gravity/Problem_1/#log-log-representation","text":"\ud83d\udccd Insert this code in a code cell plt.figure(figsize=(7, 5)) plt.plot(np.log10(radii), np.log10(periods), 'o-', color='darkgreen') plt.xlabel(\"$\\log(r)$\") plt.ylabel(\"$\\log(T)$\") plt.title(\"Log-Log Plot: $T \\propto r^{3/2}$\") plt.grid(True) plt.tight_layout() plt.show() \ud83d\udcc8 Insert Here: Log-Log Plot of \\(T\\) vs \\(r\\)","title":"\ud83d\udd39 Log-Log Representation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-discussion-and-extensions","text":"","title":"\u2705 4. Discussion and Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_1/#elliptical-orbits","text":"Kepler\u2019s third law applies to elliptical orbits if we use semi-major axis \\(a\\) instead of radius: \\[T^2 \\propto a^3\\] Newton extended Kepler\u2019s laws by showing they are consequences of the inverse-square gravitational force. This allows generalization beyond circular orbits.","title":"\ud83d\udd39 Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#other-celestial-bodies","text":"Binary stars : Kepler's law helps determine stellar masses. Satellites : Used to calculate orbital altitudes and velocities. Space probes : Missions use this law for trajectory design. Exoplanets : Orbital data allows estimation of host star mass.","title":"\ud83d\udd39 Other Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-application-estimate-mass-of-earth-and-sun","text":"","title":"\u2705 5. Application: Estimate Mass of Earth and Sun"},{"location":"1%20Physics/2%20Gravity/Problem_1/#estimate-earths-mass-from-moons-orbit","text":"\\[T = 2.36 \\times 10^6\\ \\text{s}, \\quad r = 3.844 \\times 10^8\\ \\text{m}\\] \\[M = \\frac{4\\pi^2 r^3}{G T^2}\\] \ud83d\udccd Insert this code in a code cell T = 2.36e6 r = 3.844e8 G = 6.674e-11 M_earth = 4 * np.pi**2 * r**3 / (G * T**2) print(f\"Estimated Earth mass: {M_earth:.2e} kg\")","title":"\ud83d\udd39 Estimate Earth\u2019s Mass from Moon\u2019s Orbit"},{"location":"1%20Physics/2%20Gravity/Problem_1/#estimate-suns-mass-from-earths-orbit","text":"\\[T = 3.156 \\times 10^7\\ \\text{s}, \\quad r = 1.496 \\times 10^{11}\\ \\text{m}\\] \ud83d\udccd Insert this code in a code cell T = 3.156e7 r = 1.496e11 M_sun = 4 * np.pi**2 * r**3 / (G * T**2) print(f\"Estimated Sun mass: {M_sun:.2e} kg\")","title":"\ud83d\udd39 Estimate Sun\u2019s Mass from Earth\u2019s Orbit"},{"location":"1%20Physics/2%20Gravity/Problem_1/#6-final-deliverables","text":"This report includes: \u2705 Full derivation of Kepler\u2019s Third Law \u2705 Real-world examples (Moon, Solar System) \u2705 Python simulation to verify numerically \u2705 Estimation of Earth and Sun masses \u2705 All required plots with labels and titles \u2705 Clean explanations in Markdown with LaTeX \u2705 Suggestions for further exploration","title":"\u2705 6. Final Deliverables"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}